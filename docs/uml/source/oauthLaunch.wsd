@startuml
title "Oauth 2.0 based Epic Launch"
hide footbox
autonumber "[0] "

box "User" #LightGreen
participant "Patient" as Patient << (U, #ccebc5) user >>
participant "Browser" as Browser << (U, #ccebc5) user >>
end box

box "Vidyo Components" #LightBlue
participant "Vidyo Epic Service" as VidyoEpicService << (C, #b3cde3) Vidyo >>
participant "Portal" as Portal << (C, #b3cde3) Vidyo >>
participant "Portal Database/Query Parameter Service" as PortalDB << (C, #b3cde3) Vidyo >>
participant "VidyoConnect App" as VidyoConnect << (C, #b3cde3  ) Vidyo >>
end box

box "Epic Components" #LightCoral
participant "My Chart" as Epic << (E, #fbb4ae) EPIC >>
participant "Epic Web Service" as EPS << (E, #fbb4ae) EPIC >>
end box

==Telehealth Visit Scheduled==
Epic -> Epic: configure visit details \n (name, patientID, appt time, inviteID etc..)
Epic -> Patient: Patient receives telehealth invite link \n with {launchToken, FHIR_Server_URL}

==Join Call flow==
Patient -> Portal: click on invite link sends {launchToken, FHIR_Server_URL}
Portal-> PortalDB: cache {launchToken, FHIR_Server_URL} with new GUID as key
return GUID
Portal->VidyoEpicService: start Oauth 2.0 sequence \n {GUID, launchToken, FHIR_Server_URL}
VidyoEpicService->EPS : pass { launchToken } and request authorizationCode 
return authorizationCode
VidyoEpicService->EPS : exchange authorizationCode for accessToken 
return {accessToken, meetingDetails}
VidyoEpicService->VidyoEpicService : caches accessToken in KeyValue store with GUID as key
VidyoEpicService->Portal : send meeting details to Portal
Portal->Portal : create a new meeting room
Portal->Browser : create join link with roomID & other context parameters
Browser->VidyoConnect : launch VidyoConnect query params (portal, roomKey, name, etc.)
VidyoConnect->Portal: joinCall
Portal->VidyoEpicService: notify connection established for (GUID)
VidyoEpicService->VidyoEpicService: fetch accessToken for GUID
VidyoEpicService->EPS : SetExternalConnectionStatus(1)








@enduml
